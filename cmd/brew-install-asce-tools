#!/usr/bin/env bash
#:  * `install-asce-tools` [<options>]
#:
#:  Installs common tools for work in ASCE.
#:
#:          --helm      Install Helm plugins. (default true)
#:          --kubectl   Install Kubectl plugins. (default true)
#:          --vscode    Install VS Code extensions. (default false)
#:      -h, --help      Show this message.

HELM_PLUGINS="true"
KUBECTL_PLUGINS="true"
VSCODE_EXTS="false"
for option in "$@"; do
	case "${option}" in
	--helm) HELM_PLUGINS="true" ;;
	--kubectl) KUBECTL_PLUGINS="true" ;;
	--vscode) VSCODE_EXTS="true" ;;
	*)
		brew help install-asce-tools
		exit $?
		;;
	esac
done

set -e

# Initialize cache directory
CACHE="$(brew --cache)/install-asce-tools"
[ -e "${CACHE}" ] && rm -rf "${CACHE}"
mkdir -p "${CACHE}"

############################################################
# Homebrew Utility Functions
############################################################
# From https://github.com/Homebrew/brew/blob/92d2cec5fa952c32b544faa04e671099d2dc3ff1/Library/Homebrew/brew.sh#L126

ohai() {
	# Check whether stdout is a tty.
	if [[ -n "${HOMEBREW_COLOR}" || (-t 1 && -z "${HOMEBREW_NO_COLOR}") ]]; then
		echo -e "\\033[34m==>\\033[0m \\033[1m$*\\033[0m" # blue arrow and bold text
	else
		echo "==> $*"
	fi
}

opoo() {
	# Check whether stderr is a tty.
	if [[ -n "${HOMEBREW_COLOR}" || (-t 2 && -z "${HOMEBREW_NO_COLOR}") ]]; then
		echo -ne "\\033[4;33mWarning\\033[0m: " >&2 # highlight Warning with underline and yellow color
	else
		echo -n "Warning: " >&2
	fi
	if [[ $# -eq 0 ]]; then
		cat >&2
	else
		echo "$*" >&2
	fi
}

bold() {
	# Check whether stderr is a tty.
	if [[ -n "${HOMEBREW_COLOR}" || (-t 2 && -z "${HOMEBREW_NO_COLOR}") ]]; then
		echo -e "\\033[1m""$*""\\033[0m"
	else
		echo "$*"
	fi
}

onoe() {
	# Check whether stderr is a tty.
	if [[ -n "${HOMEBREW_COLOR}" || (-t 2 && -z "${HOMEBREW_NO_COLOR}") ]]; then
		echo -ne "\\033[4;31mError\\033[0m: " >&2 # highlight Error with underline and red color
	else
		echo -n "Error: " >&2
	fi
	if [[ $# -eq 0 ]]; then
		cat >&2
	else
		echo "$*" >&2
	fi
}

odie() {
	onoe "$@"
	exit 1
}

############################################################
# Run "brew bundle install" on the Brewfiles
############################################################
# Use --verbose flag to include the caveats

# Download Brewfile to the cache directory
curl -o "${CACHE}/Brewfile" -fsSL https://raw.githubusercontent.com/act3-ace/aceup/main/asce-tools/Brewfile

ohai "Installing Homebrew Formulae with brew bundle"

brew bundle install --verbose --file="${CACHE}/Brewfile"

############################################################
# Install VS Code extensions
############################################################
if [ "${VSCODE_EXTS}" == "true" ]; then
	curl -o "${CACHE}/Brewfile-vscode" -fsSL https://raw.githubusercontent.com/act3-ace/aceup/main/asce-tools/Brewfile-vscode
	echo
	ohai "Installing VS Code extensions with brew bundle"
	brew bundle install --verbose --file="${CACHE}/Brewfile"
fi

############################################################
# Install kubectl plugins
############################################################
if [ "${KUBECTL_PLUGINS}" == "true" ]; then
	curl -o "${CACHE}/kubectl-plugins" -fsSL https://raw.githubusercontent.com/act3-ace/aceup/main/asce-tools/kubectl-plugins
	chmod +x "${CACHE}/kubectl-plugins"
	"${CACHE}/kubectl-plugins"
fi

############################################################
# Install helm plugins
############################################################
if [ "${HELM_PLUGINS}" == "true" ]; then
	curl -o "${CACHE}/helm-plugins" -fsSL https://raw.githubusercontent.com/act3-ace/aceup/main/asce-tools/helm-plugins
	chmod +x "${CACHE}/helm-plugins"
	"${CACHE}/helm-plugins"
fi
